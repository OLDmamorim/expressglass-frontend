// ===== TEMPLATE PERSONALIZADO - REGRAS DO UTILIZADOR =====

// Template baseado nas regras espec√≠ficas definidas pelo utilizador
const templatePersonalizado = {
  id: 'expressglass_personalizado',
  name: 'Expressglass Personalizado',
  description: 'Template com regras espec√≠ficas: Matr√≠cula (I), Carro (L+M), Obs (N), Outros (K)',
  isSystem: true,
  headers: [
    'Bostamp', 'Nmdos', 'Obrano', 'Dataobra', 'Nome', 'Dataservi√ßo', 'U_dtent', 
    'Status', 'Matricula', 'Obs', 'Segurado', 'Marca', 'Modelo', 'Ref', 
    'Eurocode', 'Nrfactura', 'Seriefcatura', 'Nrsinistro', 'Armazem', 'Fechado', 
    'Hora_inicio', 'Hora_fim', 'Ultima_nota', 'Detalhe_danos', 'Email', 'U_contsega'
  ],
  mapping: {
    plate: 8,        // Coluna I (Matricula)
    car: '11,12',    // Coluna L + Coluna M (Marca + Modelo)
    service: null,   // Ser√° preenchido pelo operador
    locality: null,  // Ser√° preenchido pelo operador
    notes: 13,       // Coluna N (Ref - assumindo que √© a coluna N)
    address: null,   // Ser√° preenchido pelo operador
    phone: null,     // Ser√° preenchido pelo operador
    extra: 10        // Coluna K (Segurado)
  }
};

// ===== PROCESSADOR PERSONALIZADO =====
class ProcessadorPersonalizado {
  
  constructor() {
    this.templateId = 'expressglass_personalizado';
  }
  
  // Verificar se matr√≠cula j√° existe na base de dados
  async matriculaJaExiste(matricula) {
    try {
      // Carregar agendamentos existentes
      const response = await fetch('/.netlify/functions/appointments');
      if (!response.ok) {
        console.warn('N√£o foi poss√≠vel verificar agendamentos existentes');
        return false; // Em caso de erro, permitir importa√ß√£o
      }
      
      const appointments = await response.json();
      
      // Normalizar matr√≠cula para compara√ß√£o
      const matriculaNormalizada = this.normalizarMatricula(matricula);
      
      // Verificar se j√° existe
      const existe = appointments.some(apt => 
        this.normalizarMatricula(apt.plate || '') === matriculaNormalizada
      );
      
      if (existe) {
        console.log(`üö´ Matr√≠cula ${matricula} j√° existe na base de dados - linha ignorada`);
      }
      
      return existe;
      
    } catch (error) {
      console.error('Erro ao verificar matr√≠cula existente:', error);
      return false; // Em caso de erro, permitir importa√ß√£o
    }
  }
  
  // Normalizar matr√≠cula para compara√ß√£o
  normalizarMatricula(matricula) {
    if (!matricula) return '';
    return String(matricula)
      .replace(/[^A-Z0-9]/gi, '')
      .toUpperCase();
  }
  
  // Formatar matr√≠cula para padr√£o XX-XX-XX
  formatarMatricula(matricula) {
    if (!matricula) return '';
    
    const clean = this.normalizarMatricula(matricula);
    
    if (clean.length >= 6) {
      return `${clean.slice(0,2)}-${clean.slice(2,4)}-${clean.slice(4,6)}`;
    }
    
    return clean;
  }
  
  // Processar linha individual
  async processarLinha(row, numeroLinha) {
    // Extrair dados conforme regras
    const matricula = row[8] || ''; // Coluna I
    const marca = (row[11] || '').trim(); // Coluna L
    const modelo = (row[12] || '').trim(); // Coluna M
    const observacoes = row[13] || ''; // Coluna N
    const outrosDados = row[10] || ''; // Coluna K
    
    // Valida√ß√µes b√°sicas
    if (!matricula || matricula.trim() === '') {
      throw new Error('Matr√≠cula √© obrigat√≥ria (coluna I)');
    }
    
    // üö´ FILTRO PRINCIPAL: Verificar se matr√≠cula j√° existe
    const jaExiste = await this.matriculaJaExiste(matricula);
    if (jaExiste) {
      return null; // Retorna null para indicar que deve ser ignorada
    }
    
    // Construir carro (Marca + Modelo)
    const carro = [marca, modelo].filter(v => v).join(' ');
    if (!carro) {
      throw new Error('Marca e Modelo s√£o obrigat√≥rios (colunas L e M)');
    }
    
    // Criar objeto do servi√ßo
    const servico = {
      plate: this.formatarMatricula(matricula),
      car: carro,
      service: 'PB', // Valor padr√£o - ser√° alterado pelo operador
      locality: 'Braga', // Valor padr√£o - ser√° alterado pelo operador
      notes: observacoes,
      address: '', // Vazio - ser√° preenchido pelo operador
      phone: '', // Vazio - ser√° preenchido pelo operador
      extra: outrosDados,
      
      // Campos padr√£o do sistema
      status: 'NE', // N√£o Executado
      date: null, // Sem data (por agendar)
      period: null,
      km: null,
      sortIndex: 1,
      
      // Metadados da importa√ß√£o
      importedAt: new Date().toISOString(),
      importedFrom: 'excel_personalizado'
    };
    
    return servico;
  }
  
  // Processar ficheiro completo
  async processarFicheiro(data) {
    const resultados = {
      success: [],
      errors: [],
      ignored: [] // Linhas ignoradas por matr√≠cula duplicada
    };
    
    console.log('üéØ Iniciando processamento com regras personalizadas...');
    
    for (let i = 0; i < data.length; i++) {
      const row = data[i];
      const numeroLinha = i + 2; // +2 porque √≠ndice come√ßa em 0 e primeira linha s√£o cabe√ßalhos
      
      try {
        const servico = await this.processarLinha(row, numeroLinha);
        
        if (servico === null) {
          // Linha ignorada por matr√≠cula duplicada
          resultados.ignored.push({
            row: numeroLinha,
            plate: this.formatarMatricula(row[8] || ''),
            reason: 'Matr√≠cula j√° existe na base de dados'
          });
        } else {
          // Linha processada com sucesso
          resultados.success.push({
            row: numeroLinha,
            data: servico
          });
        }
        
      } catch (error) {
        resultados.errors.push({
          row: numeroLinha,
          errors: [error.message]
        });
      }
    }
    
    console.log('‚úÖ Processamento conclu√≠do:', {
      sucessos: resultados.success.length,
      erros: resultados.errors.length,
      ignoradas: resultados.ignored.length
    });
    
    return resultados;
  }
}

// ===== INTEGRA√á√ÉO COM SISTEMA =====

// Adicionar template ao sistema quando carregado
document.addEventListener('DOMContentLoaded', function() {
  // Aguardar carregamento do sistema de templates
  setTimeout(() => {
    if (window.templateManager) {
      // Adicionar template personalizado
      window.templateManager.systemTemplates.push(templatePersonalizado);
      console.log('‚úÖ Template personalizado adicionado ao sistema');
    }
    
    // Criar inst√¢ncia do processador
    window.processadorPersonalizado = new ProcessadorPersonalizado();
    console.log('‚úÖ Processador personalizado inicializado');
    
  }, 1000);
});

// Sobrescrever detec√ß√£o para priorizar template personalizado
if (typeof window !== 'undefined') {
  window.addEventListener('load', function() {
    if (window.templateManager) {
      const originalDetectTemplate = window.templateManager.detectTemplate;
      
      window.templateManager.detectTemplate = function(headers) {
        // Verificar se √© o formato espec√≠fico (presen√ßa de colunas I, L, M, N, K)
        const headerStr = headers.join('|').toLowerCase();
        
        // Procurar por padr√µes espec√≠ficos do ficheiro
        const temCamposEspecificos = [
          'matricula', 'marca', 'modelo', 'ref', 'segurado'
        ].filter(campo => headerStr.includes(campo)).length >= 3;
        
        if (temCamposEspecificos) {
          console.log('üéØ Ficheiro com formato personalizado detectado!');
          return {
            template: this.getTemplate('expressglass_personalizado'),
            confidence: 0.98,
            mapping: templatePersonalizado.mapping
          };
        }
        
        // Sen√£o, usar detec√ß√£o normal
        return originalDetectTemplate.call(this, headers);
      };
    }
  });
}

console.log('üéØ Template personalizado configurado com regras espec√≠ficas do utilizador!');
